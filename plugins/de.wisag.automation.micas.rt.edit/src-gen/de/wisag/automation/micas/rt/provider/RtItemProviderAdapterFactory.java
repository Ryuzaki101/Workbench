/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package de.wisag.automation.micas.rt.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import de.wisag.automation.micas.rt.util.RtAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support
 * Viewers. The adapters generated by this factory convert EMF adapter
 * notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}. The
 * adapters also support Eclipse property sheets. Note that most of the adapters
 * are shared among multiple instances. <!-- begin-user-doc --> <!--
 * end-user-doc -->
 *
 * @generated
 */
public class RtItemProviderAdapterFactory extends RtAdapterFactory
        implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
    /**
     * This keeps track of the root adapter factory that delegates to this
     * adapter factory. <!-- begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    protected ComposedAdapterFactory parentAdapterFactory;

    /**
     * This is used to implement
     * {@link org.eclipse.emf.edit.provider.IChangeNotifier}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    protected IChangeNotifier changeNotifier = new ChangeNotifier();

    /**
     * This keeps track of all the supported types checked by
     * {@link #isFactoryForType isFactoryForType}. <!-- begin-user-doc --> <!--
     * end-user-doc -->
     *
     * @generated
     */
    protected Collection<Object> supportedTypes = new ArrayList<>();

    /**
     * This constructs an instance. <!-- begin-user-doc --> <!-- end-user-doc
     * -->
     *
     * @generated
     */
    public RtItemProviderAdapterFactory() {
        supportedTypes.add(IEditingDomainItemProvider.class);
        supportedTypes.add(IStructuredItemContentProvider.class);
        supportedTypes.add(ITreeItemContentProvider.class);
        supportedTypes.add(IItemLabelProvider.class);
        supportedTypes.add(IItemPropertySource.class);
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link de.wisag.automation.micas.rt.RtModule} instances. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    protected RtModuleItemProvider rtModuleItemProvider;

    /**
     * This creates an adapter for a
     * {@link de.wisag.automation.micas.rt.RtModule}. <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public Adapter createRtModuleAdapter() {
        if (rtModuleItemProvider == null) {
            rtModuleItemProvider = new RtModuleItemProvider(this);
        }

        return rtModuleItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link de.wisag.automation.micas.rt.RtTask} instances. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    protected RtTaskItemProvider rtTaskItemProvider;

    /**
     * This creates an adapter for a
     * {@link de.wisag.automation.micas.rt.RtTask}. <!-- begin-user-doc --> <!--
     * end-user-doc -->
     *
     * @generated
     */
    @Override
    public Adapter createRtTaskAdapter() {
        if (rtTaskItemProvider == null) {
            rtTaskItemProvider = new RtTaskItemProvider(this);
        }

        return rtTaskItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link de.wisag.automation.micas.rt.RtSymbol} instances. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    protected RtSymbolItemProvider rtSymbolItemProvider;

    /**
     * This creates an adapter for a
     * {@link de.wisag.automation.micas.rt.RtSymbol}. <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public Adapter createRtSymbolAdapter() {
        if (rtSymbolItemProvider == null) {
            rtSymbolItemProvider = new RtSymbolItemProvider(this);
        }

        return rtSymbolItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link de.wisag.automation.micas.rt.RtConstant} instances. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    protected RtConstantItemProvider rtConstantItemProvider;

    /**
     * This creates an adapter for a
     * {@link de.wisag.automation.micas.rt.RtConstant}. <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public Adapter createRtConstantAdapter() {
        if (rtConstantItemProvider == null) {
            rtConstantItemProvider = new RtConstantItemProvider(this);
        }

        return rtConstantItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link de.wisag.automation.micas.rt.RtVariable} instances. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    protected RtVariableItemProvider rtVariableItemProvider;

    /**
     * This creates an adapter for a
     * {@link de.wisag.automation.micas.rt.RtVariable}. <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public Adapter createRtVariableAdapter() {
        if (rtVariableItemProvider == null) {
            rtVariableItemProvider = new RtVariableItemProvider(this);
        }

        return rtVariableItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link de.wisag.automation.micas.rt.RtWordConstant} instances. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    protected RtWordConstantItemProvider rtWordConstantItemProvider;

    /**
     * This creates an adapter for a
     * {@link de.wisag.automation.micas.rt.RtWordConstant}. <!-- begin-user-doc
     * --> <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public Adapter createRtWordConstantAdapter() {
        if (rtWordConstantItemProvider == null) {
            rtWordConstantItemProvider = new RtWordConstantItemProvider(this);
        }

        return rtWordConstantItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link de.wisag.automation.micas.rt.RtFloatConstant} instances. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    protected RtFloatConstantItemProvider rtFloatConstantItemProvider;

    /**
     * This creates an adapter for a
     * {@link de.wisag.automation.micas.rt.RtFloatConstant}. <!-- begin-user-doc
     * --> <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public Adapter createRtFloatConstantAdapter() {
        if (rtFloatConstantItemProvider == null) {
            rtFloatConstantItemProvider = new RtFloatConstantItemProvider(this);
        }

        return rtFloatConstantItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link de.wisag.automation.micas.rt.RtDirectValue} instances. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    protected RtDirectValueItemProvider rtDirectValueItemProvider;

    /**
     * This creates an adapter for a
     * {@link de.wisag.automation.micas.rt.RtDirectValue}. <!-- begin-user-doc
     * --> <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public Adapter createRtDirectValueAdapter() {
        if (rtDirectValueItemProvider == null) {
            rtDirectValueItemProvider = new RtDirectValueItemProvider(this);
        }

        return rtDirectValueItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link de.wisag.automation.micas.rt.RtWordVariable} instances. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    protected RtWordVariableItemProvider rtWordVariableItemProvider;

    /**
     * This creates an adapter for a
     * {@link de.wisag.automation.micas.rt.RtWordVariable}. <!-- begin-user-doc
     * --> <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public Adapter createRtWordVariableAdapter() {
        if (rtWordVariableItemProvider == null) {
            rtWordVariableItemProvider = new RtWordVariableItemProvider(this);
        }

        return rtWordVariableItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link de.wisag.automation.micas.rt.RtFloatVariable} instances. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    protected RtFloatVariableItemProvider rtFloatVariableItemProvider;

    /**
     * This creates an adapter for a
     * {@link de.wisag.automation.micas.rt.RtFloatVariable}. <!-- begin-user-doc
     * --> <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public Adapter createRtFloatVariableAdapter() {
        if (rtFloatVariableItemProvider == null) {
            rtFloatVariableItemProvider = new RtFloatVariableItemProvider(this);
        }

        return rtFloatVariableItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link de.wisag.automation.micas.rt.RtModuleInvocation} instances. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    protected RtModuleInvocationItemProvider rtModuleInvocationItemProvider;

    /**
     * This creates an adapter for a
     * {@link de.wisag.automation.micas.rt.RtModuleInvocation}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public Adapter createRtModuleInvocationAdapter() {
        if (rtModuleInvocationItemProvider == null) {
            rtModuleInvocationItemProvider = new RtModuleInvocationItemProvider(this);
        }

        return rtModuleInvocationItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link de.wisag.automation.micas.rt.RtCommentModuleInvocation} instances.
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    protected RtCommentModuleInvocationItemProvider rtCommentModuleInvocationItemProvider;

    /**
     * This creates an adapter for a
     * {@link de.wisag.automation.micas.rt.RtCommentModuleInvocation}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public Adapter createRtCommentModuleInvocationAdapter() {
        if (rtCommentModuleInvocationItemProvider == null) {
            rtCommentModuleInvocationItemProvider = new RtCommentModuleInvocationItemProvider(this);
        }

        return rtCommentModuleInvocationItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link de.wisag.automation.micas.rt.RtReferenceConstant} instances. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    protected RtReferenceConstantItemProvider rtReferenceConstantItemProvider;

    /**
     * This creates an adapter for a
     * {@link de.wisag.automation.micas.rt.RtReferenceConstant}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public Adapter createRtReferenceConstantAdapter() {
        if (rtReferenceConstantItemProvider == null) {
            rtReferenceConstantItemProvider = new RtReferenceConstantItemProvider(this);
        }

        return rtReferenceConstantItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link de.wisag.automation.micas.rt.RtSymbolAccess} instances. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    protected RtSymbolAccessItemProvider rtSymbolAccessItemProvider;

    /**
     * This creates an adapter for a
     * {@link de.wisag.automation.micas.rt.RtSymbolAccess}. <!-- begin-user-doc
     * --> <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public Adapter createRtSymbolAccessAdapter() {
        if (rtSymbolAccessItemProvider == null) {
            rtSymbolAccessItemProvider = new RtSymbolAccessItemProvider(this);
        }

        return rtSymbolAccessItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link de.wisag.automation.micas.rt.RtHeadModule} instances. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    protected RtHeadModuleItemProvider rtHeadModuleItemProvider;

    /**
     * This creates an adapter for a
     * {@link de.wisag.automation.micas.rt.RtHeadModule}. <!-- begin-user-doc
     * --> <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public Adapter createRtHeadModuleAdapter() {
        if (rtHeadModuleItemProvider == null) {
            rtHeadModuleItemProvider = new RtHeadModuleItemProvider(this);
        }

        return rtHeadModuleItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link de.wisag.automation.micas.rt.RtTaskInfo} instances. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    protected RtTaskInfoItemProvider rtTaskInfoItemProvider;

    /**
     * This creates an adapter for a
     * {@link de.wisag.automation.micas.rt.RtTaskInfo}. <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public Adapter createRtTaskInfoAdapter() {
        if (rtTaskInfoItemProvider == null) {
            rtTaskInfoItemProvider = new RtTaskInfoItemProvider(this);
        }

        return rtTaskInfoItemProvider;
    }

    /**
     * This returns the root adapter factory that contains this factory. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public ComposeableAdapterFactory getRootAdapterFactory() {
        return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
    }

    /**
     * This sets the composed adapter factory that contains this factory. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
        this.parentAdapterFactory = parentAdapterFactory;
    }

    /**
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public boolean isFactoryForType(Object type) {
        return supportedTypes.contains(type) || super.isFactoryForType(type);
    }

    /**
     * This implementation substitutes the factory itself as the key for the
     * adapter. <!-- begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public Adapter adapt(Notifier notifier, Object type) {
        return super.adapt(notifier, this);
    }

    /**
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public Object adapt(Object object, Object type) {
        if (isFactoryForType(type)) {
            Object adapter = super.adapt(object, type);
            if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
                return adapter;
            }
        }

        return null;
    }

    /**
     * This adds a listener. <!-- begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public void addListener(INotifyChangedListener notifyChangedListener) {
        changeNotifier.addListener(notifyChangedListener);
    }

    /**
     * This removes a listener. <!-- begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public void removeListener(INotifyChangedListener notifyChangedListener) {
        changeNotifier.removeListener(notifyChangedListener);
    }

    /**
     * This delegates to {@link #changeNotifier} and to
     * {@link #parentAdapterFactory}. <!-- begin-user-doc --> <!-- end-user-doc
     * -->
     *
     * @generated
     */
    @Override
    public void fireNotifyChanged(Notification notification) {
        changeNotifier.fireNotifyChanged(notification);

        if (parentAdapterFactory != null) {
            parentAdapterFactory.fireNotifyChanged(notification);
        }
    }

    /**
     * This disposes all of the item providers created by this factory. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public void dispose() {
        if (rtModuleItemProvider != null) {
            rtModuleItemProvider.dispose();
        }
        if (rtTaskItemProvider != null) {
            rtTaskItemProvider.dispose();
        }
        if (rtSymbolItemProvider != null) {
            rtSymbolItemProvider.dispose();
        }
        if (rtConstantItemProvider != null) {
            rtConstantItemProvider.dispose();
        }
        if (rtVariableItemProvider != null) {
            rtVariableItemProvider.dispose();
        }
        if (rtWordConstantItemProvider != null) {
            rtWordConstantItemProvider.dispose();
        }
        if (rtFloatConstantItemProvider != null) {
            rtFloatConstantItemProvider.dispose();
        }
        if (rtDirectValueItemProvider != null) {
            rtDirectValueItemProvider.dispose();
        }
        if (rtWordVariableItemProvider != null) {
            rtWordVariableItemProvider.dispose();
        }
        if (rtFloatVariableItemProvider != null) {
            rtFloatVariableItemProvider.dispose();
        }
        if (rtModuleInvocationItemProvider != null) {
            rtModuleInvocationItemProvider.dispose();
        }
        if (rtCommentModuleInvocationItemProvider != null) {
            rtCommentModuleInvocationItemProvider.dispose();
        }
        if (rtReferenceConstantItemProvider != null) {
            rtReferenceConstantItemProvider.dispose();
        }
        if (rtSymbolAccessItemProvider != null) {
            rtSymbolAccessItemProvider.dispose();
        }
        if (rtHeadModuleItemProvider != null) {
            rtHeadModuleItemProvider.dispose();
        }
        if (rtTaskInfoItemProvider != null) {
            rtTaskInfoItemProvider.dispose();
        }
    }

}
