/**
 * generated by Xtext 2.12.0
 */
package de.wisag.automation.micas.mIC.impl;

import de.wisag.automation.micas.mIC.Instruction;
import de.wisag.automation.micas.mIC.MICPackage;
import de.wisag.automation.micas.mIC.MetaData;
import de.wisag.automation.micas.mIC.Task;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Task</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.wisag.automation.micas.mIC.impl.TaskImpl#getTaskProlog <em>Task Prolog</em>}</li>
 *   <li>{@link de.wisag.automation.micas.mIC.impl.TaskImpl#getIndex <em>Index</em>}</li>
 *   <li>{@link de.wisag.automation.micas.mIC.impl.TaskImpl#getType <em>Type</em>}</li>
 *   <li>{@link de.wisag.automation.micas.mIC.impl.TaskImpl#getCycleTime <em>Cycle Time</em>}</li>
 *   <li>{@link de.wisag.automation.micas.mIC.impl.TaskImpl#getInstructions <em>Instructions</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TaskImpl extends MinimalEObjectImpl.Container implements Task
{
  /**
   * The cached value of the '{@link #getTaskProlog() <em>Task Prolog</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTaskProlog()
   * @generated
   * @ordered
   */
  protected EList<MetaData> taskProlog;

  /**
   * The default value of the '{@link #getIndex() <em>Index</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIndex()
   * @generated
   * @ordered
   */
  protected static final int INDEX_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getIndex() <em>Index</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIndex()
   * @generated
   * @ordered
   */
  protected int index = INDEX_EDEFAULT;

  /**
   * The default value of the '{@link #getType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected static final String TYPE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected String type = TYPE_EDEFAULT;

  /**
   * The default value of the '{@link #getCycleTime() <em>Cycle Time</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCycleTime()
   * @generated
   * @ordered
   */
  protected static final int CYCLE_TIME_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getCycleTime() <em>Cycle Time</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCycleTime()
   * @generated
   * @ordered
   */
  protected int cycleTime = CYCLE_TIME_EDEFAULT;

  /**
   * The cached value of the '{@link #getInstructions() <em>Instructions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInstructions()
   * @generated
   * @ordered
   */
  protected EList<Instruction> instructions;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TaskImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MICPackage.Literals.TASK;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<MetaData> getTaskProlog()
  {
    if (taskProlog == null)
    {
      taskProlog = new EObjectContainmentEList<MetaData>(MetaData.class, this, MICPackage.TASK__TASK_PROLOG);
    }
    return taskProlog;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public int getIndex()
  {
    return index;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setIndex(int newIndex)
  {
    int oldIndex = index;
    index = newIndex;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MICPackage.TASK__INDEX, oldIndex, index));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getType()
  {
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setType(String newType)
  {
    String oldType = type;
    type = newType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MICPackage.TASK__TYPE, oldType, type));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public int getCycleTime()
  {
    return cycleTime;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCycleTime(int newCycleTime)
  {
    int oldCycleTime = cycleTime;
    cycleTime = newCycleTime;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MICPackage.TASK__CYCLE_TIME, oldCycleTime, cycleTime));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Instruction> getInstructions()
  {
    if (instructions == null)
    {
      instructions = new EObjectContainmentEList<Instruction>(Instruction.class, this, MICPackage.TASK__INSTRUCTIONS);
    }
    return instructions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MICPackage.TASK__TASK_PROLOG:
        return ((InternalEList<?>)getTaskProlog()).basicRemove(otherEnd, msgs);
      case MICPackage.TASK__INSTRUCTIONS:
        return ((InternalEList<?>)getInstructions()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MICPackage.TASK__TASK_PROLOG:
        return getTaskProlog();
      case MICPackage.TASK__INDEX:
        return getIndex();
      case MICPackage.TASK__TYPE:
        return getType();
      case MICPackage.TASK__CYCLE_TIME:
        return getCycleTime();
      case MICPackage.TASK__INSTRUCTIONS:
        return getInstructions();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MICPackage.TASK__TASK_PROLOG:
        getTaskProlog().clear();
        getTaskProlog().addAll((Collection<? extends MetaData>)newValue);
        return;
      case MICPackage.TASK__INDEX:
        setIndex((Integer)newValue);
        return;
      case MICPackage.TASK__TYPE:
        setType((String)newValue);
        return;
      case MICPackage.TASK__CYCLE_TIME:
        setCycleTime((Integer)newValue);
        return;
      case MICPackage.TASK__INSTRUCTIONS:
        getInstructions().clear();
        getInstructions().addAll((Collection<? extends Instruction>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MICPackage.TASK__TASK_PROLOG:
        getTaskProlog().clear();
        return;
      case MICPackage.TASK__INDEX:
        setIndex(INDEX_EDEFAULT);
        return;
      case MICPackage.TASK__TYPE:
        setType(TYPE_EDEFAULT);
        return;
      case MICPackage.TASK__CYCLE_TIME:
        setCycleTime(CYCLE_TIME_EDEFAULT);
        return;
      case MICPackage.TASK__INSTRUCTIONS:
        getInstructions().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MICPackage.TASK__TASK_PROLOG:
        return taskProlog != null && !taskProlog.isEmpty();
      case MICPackage.TASK__INDEX:
        return index != INDEX_EDEFAULT;
      case MICPackage.TASK__TYPE:
        return TYPE_EDEFAULT == null ? type != null : !TYPE_EDEFAULT.equals(type);
      case MICPackage.TASK__CYCLE_TIME:
        return cycleTime != CYCLE_TIME_EDEFAULT;
      case MICPackage.TASK__INSTRUCTIONS:
        return instructions != null && !instructions.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (index: ");
    result.append(index);
    result.append(", type: ");
    result.append(type);
    result.append(", cycleTime: ");
    result.append(cycleTime);
    result.append(')');
    return result.toString();
  }

} //TaskImpl
