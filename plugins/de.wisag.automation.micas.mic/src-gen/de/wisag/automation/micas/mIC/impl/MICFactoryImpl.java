/**
 * generated by Xtext 2.12.0
 */
package de.wisag.automation.micas.mIC.impl;

import de.wisag.automation.micas.mIC.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class MICFactoryImpl extends EFactoryImpl implements MICFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static MICFactory init()
  {
    try
    {
      MICFactory theMICFactory = (MICFactory)EPackage.Registry.INSTANCE.getEFactory(MICPackage.eNS_URI);
      if (theMICFactory != null)
      {
        return theMICFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new MICFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MICFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case MICPackage.MODEL: return createModel();
      case MICPackage.MODULE: return createModule();
      case MICPackage.SYMBOL: return createSymbol();
      case MICPackage.META_DATA: return createMetaData();
      case MICPackage.WORD_VALUE: return createWordValue();
      case MICPackage.WORD_VAR: return createWordVar();
      case MICPackage.WORD_CONST: return createWordConst();
      case MICPackage.FLOAT_VALUE: return createFloatValue();
      case MICPackage.FLOAT_VAR: return createFloatVar();
      case MICPackage.FLOAT_CONST: return createFloatConst();
      case MICPackage.DIRECT_VALUE: return createDirectValue();
      case MICPackage.REFERENCE: return createReference();
      case MICPackage.FGA_MESSAGE_CONSTANT_REFERENCE: return createFGAMessageConstantReference();
      case MICPackage.FGA_ANALOG_VALUE_REFERENCE: return createFGAAnalogValueReference();
      case MICPackage.FGA_VALUE_REFERENCE: return createFGAValueReference();
      case MICPackage.FGA_MEASURED_VALUE_REFERENCE: return createFGAMeasuredValueReference();
      case MICPackage.TASK: return createTask();
      case MICPackage.INSTRUCTION: return createInstruction();
      case MICPackage.MODULE_INVOKATION: return createModuleInvokation();
      case MICPackage.SYMBOL_ACCESSOR: return createSymbolAccessor();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Module createModule()
  {
    ModuleImpl module = new ModuleImpl();
    return module;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Symbol createSymbol()
  {
    SymbolImpl symbol = new SymbolImpl();
    return symbol;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MetaData createMetaData()
  {
    MetaDataImpl metaData = new MetaDataImpl();
    return metaData;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public WordValue createWordValue()
  {
    WordValueImpl wordValue = new WordValueImpl();
    return wordValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public WordVar createWordVar()
  {
    WordVarImpl wordVar = new WordVarImpl();
    return wordVar;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public WordConst createWordConst()
  {
    WordConstImpl wordConst = new WordConstImpl();
    return wordConst;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FloatValue createFloatValue()
  {
    FloatValueImpl floatValue = new FloatValueImpl();
    return floatValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FloatVar createFloatVar()
  {
    FloatVarImpl floatVar = new FloatVarImpl();
    return floatVar;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FloatConst createFloatConst()
  {
    FloatConstImpl floatConst = new FloatConstImpl();
    return floatConst;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DirectValue createDirectValue()
  {
    DirectValueImpl directValue = new DirectValueImpl();
    return directValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Reference createReference()
  {
    ReferenceImpl reference = new ReferenceImpl();
    return reference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FGAMessageConstantReference createFGAMessageConstantReference()
  {
    FGAMessageConstantReferenceImpl fgaMessageConstantReference = new FGAMessageConstantReferenceImpl();
    return fgaMessageConstantReference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FGAAnalogValueReference createFGAAnalogValueReference()
  {
    FGAAnalogValueReferenceImpl fgaAnalogValueReference = new FGAAnalogValueReferenceImpl();
    return fgaAnalogValueReference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FGAValueReference createFGAValueReference()
  {
    FGAValueReferenceImpl fgaValueReference = new FGAValueReferenceImpl();
    return fgaValueReference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FGAMeasuredValueReference createFGAMeasuredValueReference()
  {
    FGAMeasuredValueReferenceImpl fgaMeasuredValueReference = new FGAMeasuredValueReferenceImpl();
    return fgaMeasuredValueReference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Task createTask()
  {
    TaskImpl task = new TaskImpl();
    return task;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Instruction createInstruction()
  {
    InstructionImpl instruction = new InstructionImpl();
    return instruction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ModuleInvokation createModuleInvokation()
  {
    ModuleInvokationImpl moduleInvokation = new ModuleInvokationImpl();
    return moduleInvokation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SymbolAccessor createSymbolAccessor()
  {
    SymbolAccessorImpl symbolAccessor = new SymbolAccessorImpl();
    return symbolAccessor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MICPackage getMICPackage()
  {
    return (MICPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static MICPackage getPackage()
  {
    return MICPackage.eINSTANCE;
  }

} //MICFactoryImpl
