/**
 * generated by Xtext 2.12.0
 */
package de.wisag.automation.micas.mIC.util;

import de.wisag.automation.micas.mIC.*;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see de.wisag.automation.micas.mIC.MICPackage
 * @generated
 */
public class MICSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static MICPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MICSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = MICPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case MICPackage.MODEL:
      {
        Model model = (Model)theEObject;
        T result = caseModel(model);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MICPackage.MODULE:
      {
        Module module = (Module)theEObject;
        T result = caseModule(module);
        if (result == null) result = caseModel(module);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MICPackage.SYMBOL:
      {
        Symbol symbol = (Symbol)theEObject;
        T result = caseSymbol(symbol);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MICPackage.META_DATA:
      {
        MetaData metaData = (MetaData)theEObject;
        T result = caseMetaData(metaData);
        if (result == null) result = caseSymbol(metaData);
        if (result == null) result = caseInstruction(metaData);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MICPackage.WORD_VALUE:
      {
        WordValue wordValue = (WordValue)theEObject;
        T result = caseWordValue(wordValue);
        if (result == null) result = caseSymbol(wordValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MICPackage.WORD_VAR:
      {
        WordVar wordVar = (WordVar)theEObject;
        T result = caseWordVar(wordVar);
        if (result == null) result = caseWordValue(wordVar);
        if (result == null) result = caseSymbol(wordVar);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MICPackage.WORD_CONST:
      {
        WordConst wordConst = (WordConst)theEObject;
        T result = caseWordConst(wordConst);
        if (result == null) result = caseWordValue(wordConst);
        if (result == null) result = caseSymbol(wordConst);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MICPackage.FLOAT_VALUE:
      {
        FloatValue floatValue = (FloatValue)theEObject;
        T result = caseFloatValue(floatValue);
        if (result == null) result = caseSymbol(floatValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MICPackage.FLOAT_VAR:
      {
        FloatVar floatVar = (FloatVar)theEObject;
        T result = caseFloatVar(floatVar);
        if (result == null) result = caseFloatValue(floatVar);
        if (result == null) result = caseSymbol(floatVar);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MICPackage.FLOAT_CONST:
      {
        FloatConst floatConst = (FloatConst)theEObject;
        T result = caseFloatConst(floatConst);
        if (result == null) result = caseFloatValue(floatConst);
        if (result == null) result = caseSymbol(floatConst);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MICPackage.DIRECT_VALUE:
      {
        DirectValue directValue = (DirectValue)theEObject;
        T result = caseDirectValue(directValue);
        if (result == null) result = caseSymbolAccessor(directValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MICPackage.REFERENCE:
      {
        Reference reference = (Reference)theEObject;
        T result = caseReference(reference);
        if (result == null) result = caseSymbol(reference);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MICPackage.FGA_MESSAGE_CONSTANT_REFERENCE:
      {
        FGAMessageConstantReference fgaMessageConstantReference = (FGAMessageConstantReference)theEObject;
        T result = caseFGAMessageConstantReference(fgaMessageConstantReference);
        if (result == null) result = caseReference(fgaMessageConstantReference);
        if (result == null) result = caseSymbol(fgaMessageConstantReference);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MICPackage.FGA_ANALOG_VALUE_REFERENCE:
      {
        FGAAnalogValueReference fgaAnalogValueReference = (FGAAnalogValueReference)theEObject;
        T result = caseFGAAnalogValueReference(fgaAnalogValueReference);
        if (result == null) result = caseReference(fgaAnalogValueReference);
        if (result == null) result = caseSymbol(fgaAnalogValueReference);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MICPackage.FGA_VALUE_REFERENCE:
      {
        FGAValueReference fgaValueReference = (FGAValueReference)theEObject;
        T result = caseFGAValueReference(fgaValueReference);
        if (result == null) result = caseReference(fgaValueReference);
        if (result == null) result = caseSymbol(fgaValueReference);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MICPackage.FGA_MEASURED_VALUE_REFERENCE:
      {
        FGAMeasuredValueReference fgaMeasuredValueReference = (FGAMeasuredValueReference)theEObject;
        T result = caseFGAMeasuredValueReference(fgaMeasuredValueReference);
        if (result == null) result = caseReference(fgaMeasuredValueReference);
        if (result == null) result = caseSymbol(fgaMeasuredValueReference);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MICPackage.TASK:
      {
        Task task = (Task)theEObject;
        T result = caseTask(task);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MICPackage.INSTRUCTION:
      {
        Instruction instruction = (Instruction)theEObject;
        T result = caseInstruction(instruction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MICPackage.MODULE_INVOKATION:
      {
        ModuleInvokation moduleInvokation = (ModuleInvokation)theEObject;
        T result = caseModuleInvokation(moduleInvokation);
        if (result == null) result = caseInstruction(moduleInvokation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MICPackage.SYMBOL_ACCESSOR:
      {
        SymbolAccessor symbolAccessor = (SymbolAccessor)theEObject;
        T result = caseSymbolAccessor(symbolAccessor);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Model</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Model</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModel(Model object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Module</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Module</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModule(Module object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Symbol</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Symbol</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSymbol(Symbol object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Meta Data</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Meta Data</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMetaData(MetaData object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Word Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Word Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseWordValue(WordValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Word Var</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Word Var</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseWordVar(WordVar object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Word Const</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Word Const</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseWordConst(WordConst object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Float Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Float Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFloatValue(FloatValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Float Var</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Float Var</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFloatVar(FloatVar object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Float Const</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Float Const</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFloatConst(FloatConst object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Direct Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Direct Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDirectValue(DirectValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Reference</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Reference</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReference(Reference object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>FGA Message Constant Reference</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>FGA Message Constant Reference</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFGAMessageConstantReference(FGAMessageConstantReference object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>FGA Analog Value Reference</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>FGA Analog Value Reference</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFGAAnalogValueReference(FGAAnalogValueReference object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>FGA Value Reference</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>FGA Value Reference</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFGAValueReference(FGAValueReference object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>FGA Measured Value Reference</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>FGA Measured Value Reference</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFGAMeasuredValueReference(FGAMeasuredValueReference object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Task</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Task</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTask(Task object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Instruction</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Instruction</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInstruction(Instruction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Module Invokation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Module Invokation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModuleInvokation(ModuleInvokation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Symbol Accessor</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Symbol Accessor</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSymbolAccessor(SymbolAccessor object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //MICSwitch
