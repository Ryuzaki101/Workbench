/**
 * generated by Xtext 2.12.0
 */
package de.wisag.automation.micas.mIC.util;

import de.wisag.automation.micas.mIC.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see de.wisag.automation.micas.mIC.MICPackage
 * @generated
 */
public class MICAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static MICPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MICAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = MICPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MICSwitch<Adapter> modelSwitch =
    new MICSwitch<Adapter>()
    {
      @Override
      public Adapter caseModel(Model object)
      {
        return createModelAdapter();
      }
      @Override
      public Adapter caseModule(Module object)
      {
        return createModuleAdapter();
      }
      @Override
      public Adapter caseSymbol(Symbol object)
      {
        return createSymbolAdapter();
      }
      @Override
      public Adapter caseMetaData(MetaData object)
      {
        return createMetaDataAdapter();
      }
      @Override
      public Adapter caseWordValue(WordValue object)
      {
        return createWordValueAdapter();
      }
      @Override
      public Adapter caseWordVar(WordVar object)
      {
        return createWordVarAdapter();
      }
      @Override
      public Adapter caseWordConst(WordConst object)
      {
        return createWordConstAdapter();
      }
      @Override
      public Adapter caseFloatValue(FloatValue object)
      {
        return createFloatValueAdapter();
      }
      @Override
      public Adapter caseFloatVar(FloatVar object)
      {
        return createFloatVarAdapter();
      }
      @Override
      public Adapter caseFloatConst(FloatConst object)
      {
        return createFloatConstAdapter();
      }
      @Override
      public Adapter caseDirectValue(DirectValue object)
      {
        return createDirectValueAdapter();
      }
      @Override
      public Adapter caseReference(Reference object)
      {
        return createReferenceAdapter();
      }
      @Override
      public Adapter caseFGAMessageConstantReference(FGAMessageConstantReference object)
      {
        return createFGAMessageConstantReferenceAdapter();
      }
      @Override
      public Adapter caseFGAAnalogValueReference(FGAAnalogValueReference object)
      {
        return createFGAAnalogValueReferenceAdapter();
      }
      @Override
      public Adapter caseFGAValueReference(FGAValueReference object)
      {
        return createFGAValueReferenceAdapter();
      }
      @Override
      public Adapter caseFGAMeasuredValueReference(FGAMeasuredValueReference object)
      {
        return createFGAMeasuredValueReferenceAdapter();
      }
      @Override
      public Adapter caseTask(Task object)
      {
        return createTaskAdapter();
      }
      @Override
      public Adapter caseInstruction(Instruction object)
      {
        return createInstructionAdapter();
      }
      @Override
      public Adapter caseModuleInvokation(ModuleInvokation object)
      {
        return createModuleInvokationAdapter();
      }
      @Override
      public Adapter caseSymbolAccessor(SymbolAccessor object)
      {
        return createSymbolAccessorAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link de.wisag.automation.micas.mIC.Model <em>Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.wisag.automation.micas.mIC.Model
   * @generated
   */
  public Adapter createModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.wisag.automation.micas.mIC.Module <em>Module</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.wisag.automation.micas.mIC.Module
   * @generated
   */
  public Adapter createModuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.wisag.automation.micas.mIC.Symbol <em>Symbol</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.wisag.automation.micas.mIC.Symbol
   * @generated
   */
  public Adapter createSymbolAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.wisag.automation.micas.mIC.MetaData <em>Meta Data</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.wisag.automation.micas.mIC.MetaData
   * @generated
   */
  public Adapter createMetaDataAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.wisag.automation.micas.mIC.WordValue <em>Word Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.wisag.automation.micas.mIC.WordValue
   * @generated
   */
  public Adapter createWordValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.wisag.automation.micas.mIC.WordVar <em>Word Var</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.wisag.automation.micas.mIC.WordVar
   * @generated
   */
  public Adapter createWordVarAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.wisag.automation.micas.mIC.WordConst <em>Word Const</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.wisag.automation.micas.mIC.WordConst
   * @generated
   */
  public Adapter createWordConstAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.wisag.automation.micas.mIC.FloatValue <em>Float Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.wisag.automation.micas.mIC.FloatValue
   * @generated
   */
  public Adapter createFloatValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.wisag.automation.micas.mIC.FloatVar <em>Float Var</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.wisag.automation.micas.mIC.FloatVar
   * @generated
   */
  public Adapter createFloatVarAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.wisag.automation.micas.mIC.FloatConst <em>Float Const</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.wisag.automation.micas.mIC.FloatConst
   * @generated
   */
  public Adapter createFloatConstAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.wisag.automation.micas.mIC.DirectValue <em>Direct Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.wisag.automation.micas.mIC.DirectValue
   * @generated
   */
  public Adapter createDirectValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.wisag.automation.micas.mIC.Reference <em>Reference</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.wisag.automation.micas.mIC.Reference
   * @generated
   */
  public Adapter createReferenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.wisag.automation.micas.mIC.FGAMessageConstantReference <em>FGA Message Constant Reference</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.wisag.automation.micas.mIC.FGAMessageConstantReference
   * @generated
   */
  public Adapter createFGAMessageConstantReferenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.wisag.automation.micas.mIC.FGAAnalogValueReference <em>FGA Analog Value Reference</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.wisag.automation.micas.mIC.FGAAnalogValueReference
   * @generated
   */
  public Adapter createFGAAnalogValueReferenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.wisag.automation.micas.mIC.FGAValueReference <em>FGA Value Reference</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.wisag.automation.micas.mIC.FGAValueReference
   * @generated
   */
  public Adapter createFGAValueReferenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.wisag.automation.micas.mIC.FGAMeasuredValueReference <em>FGA Measured Value Reference</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.wisag.automation.micas.mIC.FGAMeasuredValueReference
   * @generated
   */
  public Adapter createFGAMeasuredValueReferenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.wisag.automation.micas.mIC.Task <em>Task</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.wisag.automation.micas.mIC.Task
   * @generated
   */
  public Adapter createTaskAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.wisag.automation.micas.mIC.Instruction <em>Instruction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.wisag.automation.micas.mIC.Instruction
   * @generated
   */
  public Adapter createInstructionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.wisag.automation.micas.mIC.ModuleInvokation <em>Module Invokation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.wisag.automation.micas.mIC.ModuleInvokation
   * @generated
   */
  public Adapter createModuleInvokationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.wisag.automation.micas.mIC.SymbolAccessor <em>Symbol Accessor</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.wisag.automation.micas.mIC.SymbolAccessor
   * @generated
   */
  public Adapter createSymbolAccessorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //MICAdapterFactory
