/*
 * generated by Xtext 2.12.0
 */
package de.wisag.automation.micas.serializer;

import com.google.inject.Inject;
import de.wisag.automation.micas.mIC.DirectValue;
import de.wisag.automation.micas.mIC.FGAAnalogValueReference;
import de.wisag.automation.micas.mIC.FGAMeasuredValueReference;
import de.wisag.automation.micas.mIC.FGAMessageConstantReference;
import de.wisag.automation.micas.mIC.FGAValueReference;
import de.wisag.automation.micas.mIC.FloatConst;
import de.wisag.automation.micas.mIC.FloatVar;
import de.wisag.automation.micas.mIC.MICPackage;
import de.wisag.automation.micas.mIC.MetaData;
import de.wisag.automation.micas.mIC.Module;
import de.wisag.automation.micas.mIC.ModuleInvokation;
import de.wisag.automation.micas.mIC.SymbolAccessor;
import de.wisag.automation.micas.mIC.Task;
import de.wisag.automation.micas.mIC.WordConst;
import de.wisag.automation.micas.mIC.WordVar;
import de.wisag.automation.micas.services.MICGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class MICSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MICGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MICPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MICPackage.DIRECT_VALUE:
				sequence_DirectValue(context, (DirectValue) semanticObject); 
				return; 
			case MICPackage.FGA_ANALOG_VALUE_REFERENCE:
				sequence_FGAAnalogValueReference(context, (FGAAnalogValueReference) semanticObject); 
				return; 
			case MICPackage.FGA_MEASURED_VALUE_REFERENCE:
				sequence_FGAMeasuredValueReference(context, (FGAMeasuredValueReference) semanticObject); 
				return; 
			case MICPackage.FGA_MESSAGE_CONSTANT_REFERENCE:
				sequence_FGAMessageConstantReference(context, (FGAMessageConstantReference) semanticObject); 
				return; 
			case MICPackage.FGA_VALUE_REFERENCE:
				sequence_FGAValueReference(context, (FGAValueReference) semanticObject); 
				return; 
			case MICPackage.FLOAT_CONST:
				sequence_FloatConst(context, (FloatConst) semanticObject); 
				return; 
			case MICPackage.FLOAT_VAR:
				sequence_FloatVar(context, (FloatVar) semanticObject); 
				return; 
			case MICPackage.META_DATA:
				sequence_MetaData(context, (MetaData) semanticObject); 
				return; 
			case MICPackage.MODULE:
				sequence_Module(context, (Module) semanticObject); 
				return; 
			case MICPackage.MODULE_INVOKATION:
				sequence_ModuleInvokation(context, (ModuleInvokation) semanticObject); 
				return; 
			case MICPackage.SYMBOL_ACCESSOR:
				sequence_SymbolAccessor(context, (SymbolAccessor) semanticObject); 
				return; 
			case MICPackage.TASK:
				sequence_Task(context, (Task) semanticObject); 
				return; 
			case MICPackage.WORD_CONST:
				sequence_WordConst(context, (WordConst) semanticObject); 
				return; 
			case MICPackage.WORD_VAR:
				sequence_WordVar(context, (WordVar) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     DirectValue returns DirectValue
	 *     SymbolAccessor returns DirectValue
	 *
	 * Constraint:
	 *     value=INT
	 */
	protected void sequence_DirectValue(ISerializationContext context, DirectValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MICPackage.Literals.DIRECT_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MICPackage.Literals.DIRECT_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDirectValueAccess().getValueINTTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Symbol returns FGAAnalogValueReference
	 *     Reference returns FGAAnalogValueReference
	 *     FGAAnalogValueReference returns FGAAnalogValueReference
	 *
	 * Constraint:
	 *     (name=ID row=INT)
	 */
	protected void sequence_FGAAnalogValueReference(ISerializationContext context, FGAAnalogValueReference semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MICPackage.Literals.SYMBOL__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MICPackage.Literals.SYMBOL__NAME));
			if (transientValues.isValueTransient(semanticObject, MICPackage.Literals.REFERENCE__ROW) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MICPackage.Literals.REFERENCE__ROW));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFGAAnalogValueReferenceAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getFGAAnalogValueReferenceAccess().getRowINTTerminalRuleCall_3_0(), semanticObject.getRow());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Symbol returns FGAMeasuredValueReference
	 *     Reference returns FGAMeasuredValueReference
	 *     FGAMeasuredValueReference returns FGAMeasuredValueReference
	 *
	 * Constraint:
	 *     (name=ID row=INT)
	 */
	protected void sequence_FGAMeasuredValueReference(ISerializationContext context, FGAMeasuredValueReference semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MICPackage.Literals.SYMBOL__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MICPackage.Literals.SYMBOL__NAME));
			if (transientValues.isValueTransient(semanticObject, MICPackage.Literals.REFERENCE__ROW) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MICPackage.Literals.REFERENCE__ROW));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFGAMeasuredValueReferenceAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getFGAMeasuredValueReferenceAccess().getRowINTTerminalRuleCall_3_0(), semanticObject.getRow());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Symbol returns FGAMessageConstantReference
	 *     Reference returns FGAMessageConstantReference
	 *     FGAMessageConstantReference returns FGAMessageConstantReference
	 *
	 * Constraint:
	 *     (name=ID row=INT column=INT)
	 */
	protected void sequence_FGAMessageConstantReference(ISerializationContext context, FGAMessageConstantReference semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MICPackage.Literals.SYMBOL__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MICPackage.Literals.SYMBOL__NAME));
			if (transientValues.isValueTransient(semanticObject, MICPackage.Literals.REFERENCE__ROW) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MICPackage.Literals.REFERENCE__ROW));
			if (transientValues.isValueTransient(semanticObject, MICPackage.Literals.FGA_MESSAGE_CONSTANT_REFERENCE__COLUMN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MICPackage.Literals.FGA_MESSAGE_CONSTANT_REFERENCE__COLUMN));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFGAMessageConstantReferenceAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getFGAMessageConstantReferenceAccess().getRowINTTerminalRuleCall_3_0(), semanticObject.getRow());
		feeder.accept(grammarAccess.getFGAMessageConstantReferenceAccess().getColumnINTTerminalRuleCall_5_0(), semanticObject.getColumn());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Symbol returns FGAValueReference
	 *     Reference returns FGAValueReference
	 *     FGAValueReference returns FGAValueReference
	 *
	 * Constraint:
	 *     (name=ID row=INT)
	 */
	protected void sequence_FGAValueReference(ISerializationContext context, FGAValueReference semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MICPackage.Literals.SYMBOL__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MICPackage.Literals.SYMBOL__NAME));
			if (transientValues.isValueTransient(semanticObject, MICPackage.Literals.REFERENCE__ROW) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MICPackage.Literals.REFERENCE__ROW));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFGAValueReferenceAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getFGAValueReferenceAccess().getRowINTTerminalRuleCall_3_0(), semanticObject.getRow());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Symbol returns FloatConst
	 *     FloatValue returns FloatConst
	 *     FloatConst returns FloatConst
	 *
	 * Constraint:
	 *     (name=ID value=Float)
	 */
	protected void sequence_FloatConst(ISerializationContext context, FloatConst semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MICPackage.Literals.SYMBOL__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MICPackage.Literals.SYMBOL__NAME));
			if (transientValues.isValueTransient(semanticObject, MICPackage.Literals.FLOAT_CONST__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MICPackage.Literals.FLOAT_CONST__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFloatConstAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getFloatConstAccess().getValueFloatParserRuleCall_3_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Symbol returns FloatVar
	 *     FloatValue returns FloatVar
	 *     FloatVar returns FloatVar
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_FloatVar(ISerializationContext context, FloatVar semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MICPackage.Literals.SYMBOL__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MICPackage.Literals.SYMBOL__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFloatVarAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Symbol returns MetaData
	 *     MetaData returns MetaData
	 *     Instruction returns MetaData
	 *
	 * Constraint:
	 *     (name='°nothing'? value=RAW_METADATE)
	 */
	protected void sequence_MetaData(ISerializationContext context, MetaData semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Instruction returns ModuleInvokation
	 *     ModuleInvokation returns ModuleInvokation
	 *
	 * Constraint:
	 *     (moduleName=ID (arguments+=SymbolAccessor arguments+=SymbolAccessor*)?)
	 */
	protected void sequence_ModuleInvokation(ISerializationContext context, ModuleInvokation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Module
	 *     Module returns Module
	 *
	 * Constraint:
	 *     (moduleProlog+=MetaData* type=ID value=INT decalarations+=Symbol* tasks+=Task*)
	 */
	protected void sequence_Module(ISerializationContext context, Module semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SymbolAccessor returns SymbolAccessor
	 *
	 * Constraint:
	 *     (writing?='true'? symbol=[Symbol|ID])
	 */
	protected void sequence_SymbolAccessor(ISerializationContext context, SymbolAccessor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Task returns Task
	 *
	 * Constraint:
	 *     (taskProlog+=MetaData* index=INT type=TaskStrategy cycleTime=INT? instructions+=Instruction*)
	 */
	protected void sequence_Task(ISerializationContext context, Task semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Symbol returns WordConst
	 *     WordValue returns WordConst
	 *     WordConst returns WordConst
	 *
	 * Constraint:
	 *     (name=ID value=INT)
	 */
	protected void sequence_WordConst(ISerializationContext context, WordConst semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MICPackage.Literals.SYMBOL__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MICPackage.Literals.SYMBOL__NAME));
			if (transientValues.isValueTransient(semanticObject, MICPackage.Literals.WORD_CONST__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MICPackage.Literals.WORD_CONST__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getWordConstAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getWordConstAccess().getValueINTTerminalRuleCall_3_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Symbol returns WordVar
	 *     WordValue returns WordVar
	 *     WordVar returns WordVar
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_WordVar(ISerializationContext context, WordVar semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MICPackage.Literals.SYMBOL__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MICPackage.Literals.SYMBOL__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getWordVarAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
}
