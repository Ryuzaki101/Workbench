/*
 * generated by Xtext 2.12.0
 */
package de.wisag.automation.micas.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MICGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.wisag.automation.micas.MIC.Model");
		private final RuleCall cModuleParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Model:
		//	Module;
		@Override public ParserRule getRule() { return rule; }
		
		//Module
		public RuleCall getModuleParserRuleCall() { return cModuleParserRuleCall; }
	}
	public class ModuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.wisag.automation.micas.MIC.Module");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModulePrologAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cModulePrologMetaDataParserRuleCall_0_0 = (RuleCall)cModulePrologAssignment_0.eContents().get(0);
		private final Keyword cMODULKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeIDTerminalRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cValueAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cValueINTTerminalRuleCall_5_0 = (RuleCall)cValueAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cDecalarationsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cDecalarationsSymbolParserRuleCall_7_0 = (RuleCall)cDecalarationsAssignment_7.eContents().get(0);
		private final Assignment cTasksAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cTasksTaskParserRuleCall_8_0 = (RuleCall)cTasksAssignment_8.eContents().get(0);
		private final Keyword cENDMODULKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Module:
		//	moduleProlog+=MetaData* 'MODUL' '(' type=ID ',' value=INT ')' decalarations+=Symbol* tasks+=Task* 'ENDMODUL';
		@Override public ParserRule getRule() { return rule; }
		
		//moduleProlog+=MetaData* 'MODUL' '(' type=ID ',' value=INT ')' decalarations+=Symbol* tasks+=Task* 'ENDMODUL'
		public Group getGroup() { return cGroup; }
		
		//moduleProlog+=MetaData*
		public Assignment getModulePrologAssignment_0() { return cModulePrologAssignment_0; }
		
		//MetaData
		public RuleCall getModulePrologMetaDataParserRuleCall_0_0() { return cModulePrologMetaDataParserRuleCall_0_0; }
		
		//'MODUL'
		public Keyword getMODULKeyword_1() { return cMODULKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//type=ID
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//ID
		public RuleCall getTypeIDTerminalRuleCall_3_0() { return cTypeIDTerminalRuleCall_3_0; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//value=INT
		public Assignment getValueAssignment_5() { return cValueAssignment_5; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_5_0() { return cValueINTTerminalRuleCall_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
		
		//decalarations+=Symbol*
		public Assignment getDecalarationsAssignment_7() { return cDecalarationsAssignment_7; }
		
		//Symbol
		public RuleCall getDecalarationsSymbolParserRuleCall_7_0() { return cDecalarationsSymbolParserRuleCall_7_0; }
		
		//tasks+=Task*
		public Assignment getTasksAssignment_8() { return cTasksAssignment_8; }
		
		//Task
		public RuleCall getTasksTaskParserRuleCall_8_0() { return cTasksTaskParserRuleCall_8_0; }
		
		//'ENDMODUL'
		public Keyword getENDMODULKeyword_9() { return cENDMODULKeyword_9; }
	}
	public class SymbolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.wisag.automation.micas.MIC.Symbol");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cWordValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFloatValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cReferenceParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cMetaDataParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Symbol:
		//	WordValue | FloatValue | Reference | MetaData;
		@Override public ParserRule getRule() { return rule; }
		
		//WordValue | FloatValue | Reference | MetaData
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//WordValue
		public RuleCall getWordValueParserRuleCall_0() { return cWordValueParserRuleCall_0; }
		
		//FloatValue
		public RuleCall getFloatValueParserRuleCall_1() { return cFloatValueParserRuleCall_1; }
		
		//Reference
		public RuleCall getReferenceParserRuleCall_2() { return cReferenceParserRuleCall_2; }
		
		//MetaData
		public RuleCall getMetaDataParserRuleCall_3() { return cMetaDataParserRuleCall_3; }
	}
	public class MetaDataElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.wisag.automation.micas.MIC.MetaData");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameNothingKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueRAW_METADATETerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//MetaData:
		//	name="°nothing"? value=RAW_METADATE;
		@Override public ParserRule getRule() { return rule; }
		
		//// create an abstract Superclass
		// name="°nothing"? value=RAW_METADATE
		public Group getGroup() { return cGroup; }
		
		//// create an abstract Superclass
		// name="°nothing"?
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"°nothing"
		public Keyword getNameNothingKeyword_0_0() { return cNameNothingKeyword_0_0; }
		
		//value=RAW_METADATE
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//RAW_METADATE
		public RuleCall getValueRAW_METADATETerminalRuleCall_1_0() { return cValueRAW_METADATETerminalRuleCall_1_0; }
	}
	public class WordValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.wisag.automation.micas.MIC.WordValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cWordVarParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cWordConstParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//WordValue:
		//	WordVar | WordConst;
		@Override public ParserRule getRule() { return rule; }
		
		//WordVar | WordConst
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//WordVar
		public RuleCall getWordVarParserRuleCall_0() { return cWordVarParserRuleCall_0; }
		
		//WordConst
		public RuleCall getWordConstParserRuleCall_1() { return cWordConstParserRuleCall_1; }
	}
	public class WordVarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.wisag.automation.micas.MIC.WordVar");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWordVKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//WordVar:
		//	'WordV' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'WordV' name=ID
		public Group getGroup() { return cGroup; }
		
		//'WordV'
		public Keyword getWordVKeyword_0() { return cWordVKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class WordConstElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.wisag.automation.micas.MIC.WordConst");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWordKKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueINTTerminalRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//WordConst:
		//	'WordK' name=ID '(' value=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'WordK' name=ID '(' value=INT ')'
		public Group getGroup() { return cGroup; }
		
		//'WordK'
		public Keyword getWordKKeyword_0() { return cWordKKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//value=INT
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_3_0() { return cValueINTTerminalRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class FloatValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.wisag.automation.micas.MIC.FloatValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFloatVarParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFloatConstParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//FloatValue:
		//	FloatVar | FloatConst;
		@Override public ParserRule getRule() { return rule; }
		
		//FloatVar | FloatConst
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FloatVar
		public RuleCall getFloatVarParserRuleCall_0() { return cFloatVarParserRuleCall_0; }
		
		//FloatConst
		public RuleCall getFloatConstParserRuleCall_1() { return cFloatConstParserRuleCall_1; }
	}
	public class FloatVarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.wisag.automation.micas.MIC.FloatVar");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFloatVKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//FloatVar:
		//	'FloatV' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'FloatV' name=ID
		public Group getGroup() { return cGroup; }
		
		//'FloatV'
		public Keyword getFloatVKeyword_0() { return cFloatVKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class FloatConstElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.wisag.automation.micas.MIC.FloatConst");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFloatKKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueFloatParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//FloatConst:
		//	'FloatK' name=ID '(' value=Float ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'FloatK' name=ID '(' value=Float ')'
		public Group getGroup() { return cGroup; }
		
		//'FloatK'
		public Keyword getFloatKKeyword_0() { return cFloatKKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//value=Float
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//Float
		public RuleCall getValueFloatParserRuleCall_3_0() { return cValueFloatParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class DirectValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.wisag.automation.micas.MIC.DirectValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//DirectValue:
		//	value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}
	public class ReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.wisag.automation.micas.MIC.Reference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFGAMessageConstantReferenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFGAAnalogValueReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFGAValueReferenceParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cFGAMeasuredValueReferenceParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Reference:
		//	FGAMessageConstantReference | FGAAnalogValueReference | FGAValueReference | FGAMeasuredValueReference;
		@Override public ParserRule getRule() { return rule; }
		
		//FGAMessageConstantReference | FGAAnalogValueReference | FGAValueReference | FGAMeasuredValueReference
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FGAMessageConstantReference
		public RuleCall getFGAMessageConstantReferenceParserRuleCall_0() { return cFGAMessageConstantReferenceParserRuleCall_0; }
		
		//FGAAnalogValueReference
		public RuleCall getFGAAnalogValueReferenceParserRuleCall_1() { return cFGAAnalogValueReferenceParserRuleCall_1; }
		
		//FGAValueReference
		public RuleCall getFGAValueReferenceParserRuleCall_2() { return cFGAValueReferenceParserRuleCall_2; }
		
		//FGAMeasuredValueReference
		public RuleCall getFGAMeasuredValueReferenceParserRuleCall_3() { return cFGAMeasuredValueReferenceParserRuleCall_3; }
	}
	public class FGAMessageConstantReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.wisag.automation.micas.MIC.FGAMessageConstantReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIPAMBKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRowAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRowINTTerminalRuleCall_3_0 = (RuleCall)cRowAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cColumnAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cColumnINTTerminalRuleCall_5_0 = (RuleCall)cColumnAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//// Meldungskonstante,FGA_MESSAGE_CONST
		// FGAMessageConstantReference:
		//	'IPAMB' name=ID '(' row=INT ',' column=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'IPAMB' name=ID '(' row=INT ',' column=INT ')'
		public Group getGroup() { return cGroup; }
		
		//'IPAMB'
		public Keyword getIPAMBKeyword_0() { return cIPAMBKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//row=INT
		public Assignment getRowAssignment_3() { return cRowAssignment_3; }
		
		//INT
		public RuleCall getRowINTTerminalRuleCall_3_0() { return cRowINTTerminalRuleCall_3_0; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//column=INT
		public Assignment getColumnAssignment_5() { return cColumnAssignment_5; }
		
		//INT
		public RuleCall getColumnINTTerminalRuleCall_5_0() { return cColumnINTTerminalRuleCall_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class FGAAnalogValueReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.wisag.automation.micas.MIC.FGAAnalogValueReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIPAAWKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRowAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRowINTTerminalRuleCall_3_0 = (RuleCall)cRowAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////  Analogwertkonstante,FGA_ANALOG_VALUE
		// FGAAnalogValueReference:
		//	'IPAAW' name=ID '(' row=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'IPAAW' name=ID '(' row=INT ')'
		public Group getGroup() { return cGroup; }
		
		//'IPAAW'
		public Keyword getIPAAWKeyword_0() { return cIPAAWKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//row=INT
		public Assignment getRowAssignment_3() { return cRowAssignment_3; }
		
		//INT
		public RuleCall getRowINTTerminalRuleCall_3_0() { return cRowINTTerminalRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class FGAValueReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.wisag.automation.micas.MIC.FGAValueReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIPAZWKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRowAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRowINTTerminalRuleCall_3_0 = (RuleCall)cRowAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// Zaehlwertkonstante,FGA_VALUE
		// FGAValueReference:
		//	'IPAZW' name=ID '(' row=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'IPAZW' name=ID '(' row=INT ')'
		public Group getGroup() { return cGroup; }
		
		//'IPAZW'
		public Keyword getIPAZWKeyword_0() { return cIPAZWKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//row=INT
		public Assignment getRowAssignment_3() { return cRowAssignment_3; }
		
		//INT
		public RuleCall getRowINTTerminalRuleCall_3_0() { return cRowINTTerminalRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class FGAMeasuredValueReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.wisag.automation.micas.MIC.FGAMeasuredValueReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIPAMWKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRowAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRowINTTerminalRuleCall_3_0 = (RuleCall)cRowAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// Messwertkonstante,FGA_MEASURED_VALUE
		// FGAMeasuredValueReference:
		//	'IPAMW' name=ID '(' row=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'IPAMW' name=ID '(' row=INT ')'
		public Group getGroup() { return cGroup; }
		
		//'IPAMW'
		public Keyword getIPAMWKeyword_0() { return cIPAMWKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//row=INT
		public Assignment getRowAssignment_3() { return cRowAssignment_3; }
		
		//INT
		public RuleCall getRowINTTerminalRuleCall_3_0() { return cRowINTTerminalRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class TaskElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.wisag.automation.micas.MIC.Task");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTaskPrologAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTaskPrologMetaDataParserRuleCall_0_0 = (RuleCall)cTaskPrologAssignment_0.eContents().get(0);
		private final Keyword cTASKKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIndexAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIndexINTTerminalRuleCall_3_0 = (RuleCall)cIndexAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTypeTaskStrategyParserRuleCall_5_0 = (RuleCall)cTypeAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cCycleTimeAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cCycleTimeINTTerminalRuleCall_6_1_0 = (RuleCall)cCycleTimeAssignment_6_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cInstructionsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cInstructionsInstructionParserRuleCall_8_0 = (RuleCall)cInstructionsAssignment_8.eContents().get(0);
		private final Keyword cENDEKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Task:
		//	taskProlog+=MetaData* 'TASK' '(' index=INT ',' type=TaskStrategy (',' cycleTime=INT)? ')' instructions+=Instruction*
		//	'ENDE';
		@Override public ParserRule getRule() { return rule; }
		
		//taskProlog+=MetaData* 'TASK' '(' index=INT ',' type=TaskStrategy (',' cycleTime=INT)? ')' instructions+=Instruction*
		//'ENDE'
		public Group getGroup() { return cGroup; }
		
		//taskProlog+=MetaData*
		public Assignment getTaskPrologAssignment_0() { return cTaskPrologAssignment_0; }
		
		//MetaData
		public RuleCall getTaskPrologMetaDataParserRuleCall_0_0() { return cTaskPrologMetaDataParserRuleCall_0_0; }
		
		//'TASK'
		public Keyword getTASKKeyword_1() { return cTASKKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//index=INT
		public Assignment getIndexAssignment_3() { return cIndexAssignment_3; }
		
		//INT
		public RuleCall getIndexINTTerminalRuleCall_3_0() { return cIndexINTTerminalRuleCall_3_0; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//type=TaskStrategy
		public Assignment getTypeAssignment_5() { return cTypeAssignment_5; }
		
		//TaskStrategy
		public RuleCall getTypeTaskStrategyParserRuleCall_5_0() { return cTypeTaskStrategyParserRuleCall_5_0; }
		
		//(',' cycleTime=INT)?
		public Group getGroup_6() { return cGroup_6; }
		
		//','
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }
		
		//cycleTime=INT
		public Assignment getCycleTimeAssignment_6_1() { return cCycleTimeAssignment_6_1; }
		
		//INT
		public RuleCall getCycleTimeINTTerminalRuleCall_6_1_0() { return cCycleTimeINTTerminalRuleCall_6_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
		
		//instructions+=Instruction*
		public Assignment getInstructionsAssignment_8() { return cInstructionsAssignment_8; }
		
		//Instruction
		public RuleCall getInstructionsInstructionParserRuleCall_8_0() { return cInstructionsInstructionParserRuleCall_8_0; }
		
		//'ENDE'
		public Keyword getENDEKeyword_9() { return cENDEKeyword_9; }
	}
	public class InstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.wisag.automation.micas.MIC.Instruction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cModuleInvokationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMetaDataParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Instruction:
		//	ModuleInvokation | MetaData;
		@Override public ParserRule getRule() { return rule; }
		
		//ModuleInvokation | MetaData
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ModuleInvokation
		public RuleCall getModuleInvokationParserRuleCall_0() { return cModuleInvokationParserRuleCall_0; }
		
		//MetaData
		public RuleCall getMetaDataParserRuleCall_1() { return cMetaDataParserRuleCall_1; }
	}
	public class ModuleInvokationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.wisag.automation.micas.MIC.ModuleInvokation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModuleNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cModuleNameIDTerminalRuleCall_0_0 = (RuleCall)cModuleNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cArgumentsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cArgumentsSymbolAccessorParserRuleCall_2_0_0 = (RuleCall)cArgumentsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cArgumentsSymbolAccessorParserRuleCall_2_1_1_0 = (RuleCall)cArgumentsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ModuleInvokation:
		//	moduleName=ID '(' (arguments+=SymbolAccessor (',' arguments+=SymbolAccessor)*)? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//moduleName=ID '(' (arguments+=SymbolAccessor (',' arguments+=SymbolAccessor)*)? ')'
		public Group getGroup() { return cGroup; }
		
		//moduleName=ID
		public Assignment getModuleNameAssignment_0() { return cModuleNameAssignment_0; }
		
		//ID
		public RuleCall getModuleNameIDTerminalRuleCall_0_0() { return cModuleNameIDTerminalRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(arguments+=SymbolAccessor (',' arguments+=SymbolAccessor)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//arguments+=SymbolAccessor
		public Assignment getArgumentsAssignment_2_0() { return cArgumentsAssignment_2_0; }
		
		//SymbolAccessor
		public RuleCall getArgumentsSymbolAccessorParserRuleCall_2_0_0() { return cArgumentsSymbolAccessorParserRuleCall_2_0_0; }
		
		//(',' arguments+=SymbolAccessor)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//arguments+=SymbolAccessor
		public Assignment getArgumentsAssignment_2_1_1() { return cArgumentsAssignment_2_1_1; }
		
		//SymbolAccessor
		public RuleCall getArgumentsSymbolAccessorParserRuleCall_2_1_1_0() { return cArgumentsSymbolAccessorParserRuleCall_2_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class SymbolAccessorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.wisag.automation.micas.MIC.SymbolAccessor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final Keyword cWriteaccessKeyword_0_0_0 = (Keyword)cGroup_0_0.eContents().get(0);
		private final Assignment cWritingAssignment_0_0_1 = (Assignment)cGroup_0_0.eContents().get(1);
		private final Keyword cWritingTrueKeyword_0_0_1_0 = (Keyword)cWritingAssignment_0_0_1.eContents().get(0);
		private final Assignment cSymbolAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cSymbolSymbolCrossReference_0_1_0 = (CrossReference)cSymbolAssignment_0_1.eContents().get(0);
		private final RuleCall cSymbolSymbolIDTerminalRuleCall_0_1_0_1 = (RuleCall)cSymbolSymbolCrossReference_0_1_0.eContents().get(1);
		private final RuleCall cDirectValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//SymbolAccessor:
		//	('writeaccess=' writing?='true')? symbol=[Symbol] | DirectValue;
		@Override public ParserRule getRule() { return rule; }
		
		//('writeaccess=' writing?='true')? symbol=[Symbol] | DirectValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//('writeaccess=' writing?='true')? symbol=[Symbol]
		public Group getGroup_0() { return cGroup_0; }
		
		//('writeaccess=' writing?='true')?
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//'writeaccess='
		public Keyword getWriteaccessKeyword_0_0_0() { return cWriteaccessKeyword_0_0_0; }
		
		//writing?='true'
		public Assignment getWritingAssignment_0_0_1() { return cWritingAssignment_0_0_1; }
		
		//'true'
		public Keyword getWritingTrueKeyword_0_0_1_0() { return cWritingTrueKeyword_0_0_1_0; }
		
		//symbol=[Symbol]
		public Assignment getSymbolAssignment_0_1() { return cSymbolAssignment_0_1; }
		
		//[Symbol]
		public CrossReference getSymbolSymbolCrossReference_0_1_0() { return cSymbolSymbolCrossReference_0_1_0; }
		
		//ID
		public RuleCall getSymbolSymbolIDTerminalRuleCall_0_1_0_1() { return cSymbolSymbolIDTerminalRuleCall_0_1_0_1; }
		
		//DirectValue
		public RuleCall getDirectValueParserRuleCall_1() { return cDirectValueParserRuleCall_1; }
	}
	public class FloatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.wisag.automation.micas.MIC.Float");
		private final RuleCall cXFLOATTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Float ecore::EDouble:
		//	XFLOAT;
		@Override public ParserRule getRule() { return rule; }
		
		//XFLOAT
		public RuleCall getXFLOATTerminalRuleCall() { return cXFLOATTerminalRuleCall; }
	}
	public class TaskStrategyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.wisag.automation.micas.MIC.TaskStrategy");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cCyclKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cBackKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cInitKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cCyclsKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cEvntsKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cBacksKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cInitsKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cCYCLKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cBACKKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cINITKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cCYCLSKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cEVNTSKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cBACKSKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cINITSKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		
		//TaskStrategy:
		//	'cycl' | 'back' | 'init' | 'cycls' | 'evnts' | 'backs' | 'inits' | 'CYCL' | 'BACK' | 'INIT' | 'CYCLS' | 'EVNTS' |
		//	'BACKS' | 'INITS';
		@Override public ParserRule getRule() { return rule; }
		
		//'cycl' | 'back' | 'init' | 'cycls' | 'evnts' | 'backs' | 'inits' | 'CYCL' | 'BACK' | 'INIT' | 'CYCLS' | 'EVNTS' |
		//'BACKS' | 'INITS'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'cycl'
		public Keyword getCyclKeyword_0() { return cCyclKeyword_0; }
		
		//'back'
		public Keyword getBackKeyword_1() { return cBackKeyword_1; }
		
		//'init'
		public Keyword getInitKeyword_2() { return cInitKeyword_2; }
		
		//'cycls'
		public Keyword getCyclsKeyword_3() { return cCyclsKeyword_3; }
		
		//'evnts'
		public Keyword getEvntsKeyword_4() { return cEvntsKeyword_4; }
		
		//'backs'
		public Keyword getBacksKeyword_5() { return cBacksKeyword_5; }
		
		//'inits'
		public Keyword getInitsKeyword_6() { return cInitsKeyword_6; }
		
		//'CYCL'
		public Keyword getCYCLKeyword_7() { return cCYCLKeyword_7; }
		
		//'BACK'
		public Keyword getBACKKeyword_8() { return cBACKKeyword_8; }
		
		//'INIT'
		public Keyword getINITKeyword_9() { return cINITKeyword_9; }
		
		//'CYCLS'
		public Keyword getCYCLSKeyword_10() { return cCYCLSKeyword_10; }
		
		//'EVNTS'
		public Keyword getEVNTSKeyword_11() { return cEVNTSKeyword_11; }
		
		//'BACKS'
		public Keyword getBACKSKeyword_12() { return cBACKSKeyword_12; }
		
		//'INITS'
		public Keyword getINITSKeyword_13() { return cINITSKeyword_13; }
	}
	
	
	private final ModelElements pModel;
	private final ModuleElements pModule;
	private final SymbolElements pSymbol;
	private final MetaDataElements pMetaData;
	private final WordValueElements pWordValue;
	private final WordVarElements pWordVar;
	private final WordConstElements pWordConst;
	private final FloatValueElements pFloatValue;
	private final FloatVarElements pFloatVar;
	private final FloatConstElements pFloatConst;
	private final DirectValueElements pDirectValue;
	private final ReferenceElements pReference;
	private final FGAMessageConstantReferenceElements pFGAMessageConstantReference;
	private final FGAAnalogValueReferenceElements pFGAAnalogValueReference;
	private final FGAValueReferenceElements pFGAValueReference;
	private final FGAMeasuredValueReferenceElements pFGAMeasuredValueReference;
	private final TaskElements pTask;
	private final InstructionElements pInstruction;
	private final ModuleInvokationElements pModuleInvokation;
	private final SymbolAccessorElements pSymbolAccessor;
	private final FloatElements pFloat;
	private final TaskStrategyElements pTaskStrategy;
	private final TerminalRule tRAW_METADATE;
	private final TerminalRule tXFLOAT;
	private final TerminalRule tINT;
	private final TerminalRule tID;
	private final TerminalRule tSPACE;
	private final TerminalRule tEOL;
	
	private final Grammar grammar;

	@Inject
	public MICGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pModel = new ModelElements();
		this.pModule = new ModuleElements();
		this.pSymbol = new SymbolElements();
		this.pMetaData = new MetaDataElements();
		this.pWordValue = new WordValueElements();
		this.pWordVar = new WordVarElements();
		this.pWordConst = new WordConstElements();
		this.pFloatValue = new FloatValueElements();
		this.pFloatVar = new FloatVarElements();
		this.pFloatConst = new FloatConstElements();
		this.pDirectValue = new DirectValueElements();
		this.pReference = new ReferenceElements();
		this.pFGAMessageConstantReference = new FGAMessageConstantReferenceElements();
		this.pFGAAnalogValueReference = new FGAAnalogValueReferenceElements();
		this.pFGAValueReference = new FGAValueReferenceElements();
		this.pFGAMeasuredValueReference = new FGAMeasuredValueReferenceElements();
		this.pTask = new TaskElements();
		this.pInstruction = new InstructionElements();
		this.pModuleInvokation = new ModuleInvokationElements();
		this.pSymbolAccessor = new SymbolAccessorElements();
		this.pFloat = new FloatElements();
		this.pTaskStrategy = new TaskStrategyElements();
		this.tRAW_METADATE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.wisag.automation.micas.MIC.RAW_METADATE");
		this.tXFLOAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.wisag.automation.micas.MIC.XFLOAT");
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.wisag.automation.micas.MIC.INT");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.wisag.automation.micas.MIC.ID");
		this.tSPACE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.wisag.automation.micas.MIC.SPACE");
		this.tEOL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.wisag.automation.micas.MIC.EOL");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.wisag.automation.micas.MIC".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Model:
	//	Module;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Module:
	//	moduleProlog+=MetaData* 'MODUL' '(' type=ID ',' value=INT ')' decalarations+=Symbol* tasks+=Task* 'ENDMODUL';
	public ModuleElements getModuleAccess() {
		return pModule;
	}
	
	public ParserRule getModuleRule() {
		return getModuleAccess().getRule();
	}
	
	//Symbol:
	//	WordValue | FloatValue | Reference | MetaData;
	public SymbolElements getSymbolAccess() {
		return pSymbol;
	}
	
	public ParserRule getSymbolRule() {
		return getSymbolAccess().getRule();
	}
	
	//MetaData:
	//	name="°nothing"? value=RAW_METADATE;
	public MetaDataElements getMetaDataAccess() {
		return pMetaData;
	}
	
	public ParserRule getMetaDataRule() {
		return getMetaDataAccess().getRule();
	}
	
	//WordValue:
	//	WordVar | WordConst;
	public WordValueElements getWordValueAccess() {
		return pWordValue;
	}
	
	public ParserRule getWordValueRule() {
		return getWordValueAccess().getRule();
	}
	
	//WordVar:
	//	'WordV' name=ID;
	public WordVarElements getWordVarAccess() {
		return pWordVar;
	}
	
	public ParserRule getWordVarRule() {
		return getWordVarAccess().getRule();
	}
	
	//WordConst:
	//	'WordK' name=ID '(' value=INT ')';
	public WordConstElements getWordConstAccess() {
		return pWordConst;
	}
	
	public ParserRule getWordConstRule() {
		return getWordConstAccess().getRule();
	}
	
	//FloatValue:
	//	FloatVar | FloatConst;
	public FloatValueElements getFloatValueAccess() {
		return pFloatValue;
	}
	
	public ParserRule getFloatValueRule() {
		return getFloatValueAccess().getRule();
	}
	
	//FloatVar:
	//	'FloatV' name=ID;
	public FloatVarElements getFloatVarAccess() {
		return pFloatVar;
	}
	
	public ParserRule getFloatVarRule() {
		return getFloatVarAccess().getRule();
	}
	
	//FloatConst:
	//	'FloatK' name=ID '(' value=Float ')';
	public FloatConstElements getFloatConstAccess() {
		return pFloatConst;
	}
	
	public ParserRule getFloatConstRule() {
		return getFloatConstAccess().getRule();
	}
	
	//DirectValue:
	//	value=INT;
	public DirectValueElements getDirectValueAccess() {
		return pDirectValue;
	}
	
	public ParserRule getDirectValueRule() {
		return getDirectValueAccess().getRule();
	}
	
	//Reference:
	//	FGAMessageConstantReference | FGAAnalogValueReference | FGAValueReference | FGAMeasuredValueReference;
	public ReferenceElements getReferenceAccess() {
		return pReference;
	}
	
	public ParserRule getReferenceRule() {
		return getReferenceAccess().getRule();
	}
	
	//// Meldungskonstante,FGA_MESSAGE_CONST
	// FGAMessageConstantReference:
	//	'IPAMB' name=ID '(' row=INT ',' column=INT ')';
	public FGAMessageConstantReferenceElements getFGAMessageConstantReferenceAccess() {
		return pFGAMessageConstantReference;
	}
	
	public ParserRule getFGAMessageConstantReferenceRule() {
		return getFGAMessageConstantReferenceAccess().getRule();
	}
	
	////  Analogwertkonstante,FGA_ANALOG_VALUE
	// FGAAnalogValueReference:
	//	'IPAAW' name=ID '(' row=INT ')';
	public FGAAnalogValueReferenceElements getFGAAnalogValueReferenceAccess() {
		return pFGAAnalogValueReference;
	}
	
	public ParserRule getFGAAnalogValueReferenceRule() {
		return getFGAAnalogValueReferenceAccess().getRule();
	}
	
	//// Zaehlwertkonstante,FGA_VALUE
	// FGAValueReference:
	//	'IPAZW' name=ID '(' row=INT ')';
	public FGAValueReferenceElements getFGAValueReferenceAccess() {
		return pFGAValueReference;
	}
	
	public ParserRule getFGAValueReferenceRule() {
		return getFGAValueReferenceAccess().getRule();
	}
	
	//// Messwertkonstante,FGA_MEASURED_VALUE
	// FGAMeasuredValueReference:
	//	'IPAMW' name=ID '(' row=INT ')';
	public FGAMeasuredValueReferenceElements getFGAMeasuredValueReferenceAccess() {
		return pFGAMeasuredValueReference;
	}
	
	public ParserRule getFGAMeasuredValueReferenceRule() {
		return getFGAMeasuredValueReferenceAccess().getRule();
	}
	
	//Task:
	//	taskProlog+=MetaData* 'TASK' '(' index=INT ',' type=TaskStrategy (',' cycleTime=INT)? ')' instructions+=Instruction*
	//	'ENDE';
	public TaskElements getTaskAccess() {
		return pTask;
	}
	
	public ParserRule getTaskRule() {
		return getTaskAccess().getRule();
	}
	
	//Instruction:
	//	ModuleInvokation | MetaData;
	public InstructionElements getInstructionAccess() {
		return pInstruction;
	}
	
	public ParserRule getInstructionRule() {
		return getInstructionAccess().getRule();
	}
	
	//ModuleInvokation:
	//	moduleName=ID '(' (arguments+=SymbolAccessor (',' arguments+=SymbolAccessor)*)? ')';
	public ModuleInvokationElements getModuleInvokationAccess() {
		return pModuleInvokation;
	}
	
	public ParserRule getModuleInvokationRule() {
		return getModuleInvokationAccess().getRule();
	}
	
	//SymbolAccessor:
	//	('writeaccess=' writing?='true')? symbol=[Symbol] | DirectValue;
	public SymbolAccessorElements getSymbolAccessorAccess() {
		return pSymbolAccessor;
	}
	
	public ParserRule getSymbolAccessorRule() {
		return getSymbolAccessorAccess().getRule();
	}
	
	//Float ecore::EDouble:
	//	XFLOAT;
	public FloatElements getFloatAccess() {
		return pFloat;
	}
	
	public ParserRule getFloatRule() {
		return getFloatAccess().getRule();
	}
	
	//TaskStrategy:
	//	'cycl' | 'back' | 'init' | 'cycls' | 'evnts' | 'backs' | 'inits' | 'CYCL' | 'BACK' | 'INIT' | 'CYCLS' | 'EVNTS' |
	//	'BACKS' | 'INITS';
	public TaskStrategyElements getTaskStrategyAccess() {
		return pTaskStrategy;
	}
	
	public ParserRule getTaskStrategyRule() {
		return getTaskStrategyAccess().getRule();
	}
	
	//terminal RAW_METADATE:
	//	';' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getRAW_METADATERule() {
		return tRAW_METADATE;
	}
	
	//terminal XFLOAT:
	//	('-' | '+')? '0'..'9'+ '.' '0'..'9'+;
	public TerminalRule getXFLOATRule() {
		return tXFLOAT;
	}
	
	//terminal INT returns ecore::EInt:
	//	'-'? '0'..'9'+;
	public TerminalRule getINTRule() {
		return tINT;
	}
	
	//terminal ID:
	//	('$' | '&' | 'A'..'Z' | 'a'..'z' | '_' | '/' | '0'..'9' | '\\') ('&' | 'A'..'Z' | 'a'..'z' | '0'..'9' | '@' | 'Ä' |
	//	'Ü' | 'Ö' | 'ä' | 'ü' | 'ö' | 'ß' | '<' | '>' | '.' | '_' | '/' | '+' | '-' | '~' | '=' | '?')+;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal SPACE:
	//	' ' | '\t';
	public TerminalRule getSPACERule() {
		return tSPACE;
	}
	
	//terminal EOL:
	//	'\r' | '\n'+;
	public TerminalRule getEOLRule() {
		return tEOL;
	}
}
