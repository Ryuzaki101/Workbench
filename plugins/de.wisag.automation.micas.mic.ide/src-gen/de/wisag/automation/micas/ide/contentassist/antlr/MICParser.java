/*
 * generated by Xtext 2.12.0
 */
package de.wisag.automation.micas.ide.contentassist.antlr;

import com.google.inject.Inject;
import de.wisag.automation.micas.ide.contentassist.antlr.internal.InternalMICParser;
import de.wisag.automation.micas.services.MICGrammarAccess;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class MICParser extends AbstractContentAssistParser {

	@Inject
	private MICGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalMICParser createParser() {
		InternalMICParser result = new InternalMICParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getSymbolAccess().getAlternatives(), "rule__Symbol__Alternatives");
					put(grammarAccess.getWordValueAccess().getAlternatives(), "rule__WordValue__Alternatives");
					put(grammarAccess.getFloatValueAccess().getAlternatives(), "rule__FloatValue__Alternatives");
					put(grammarAccess.getReferenceAccess().getAlternatives(), "rule__Reference__Alternatives");
					put(grammarAccess.getInstructionAccess().getAlternatives(), "rule__Instruction__Alternatives");
					put(grammarAccess.getSymbolAccessorAccess().getAlternatives(), "rule__SymbolAccessor__Alternatives");
					put(grammarAccess.getTaskStrategyAccess().getAlternatives(), "rule__TaskStrategy__Alternatives");
					put(grammarAccess.getModuleAccess().getGroup(), "rule__Module__Group__0");
					put(grammarAccess.getMetaDataAccess().getGroup(), "rule__MetaData__Group__0");
					put(grammarAccess.getWordVarAccess().getGroup(), "rule__WordVar__Group__0");
					put(grammarAccess.getWordConstAccess().getGroup(), "rule__WordConst__Group__0");
					put(grammarAccess.getFloatVarAccess().getGroup(), "rule__FloatVar__Group__0");
					put(grammarAccess.getFloatConstAccess().getGroup(), "rule__FloatConst__Group__0");
					put(grammarAccess.getFGAMessageConstantReferenceAccess().getGroup(), "rule__FGAMessageConstantReference__Group__0");
					put(grammarAccess.getFGAAnalogValueReferenceAccess().getGroup(), "rule__FGAAnalogValueReference__Group__0");
					put(grammarAccess.getFGAValueReferenceAccess().getGroup(), "rule__FGAValueReference__Group__0");
					put(grammarAccess.getFGAMeasuredValueReferenceAccess().getGroup(), "rule__FGAMeasuredValueReference__Group__0");
					put(grammarAccess.getTaskAccess().getGroup(), "rule__Task__Group__0");
					put(grammarAccess.getTaskAccess().getGroup_6(), "rule__Task__Group_6__0");
					put(grammarAccess.getModuleInvokationAccess().getGroup(), "rule__ModuleInvokation__Group__0");
					put(grammarAccess.getModuleInvokationAccess().getGroup_2(), "rule__ModuleInvokation__Group_2__0");
					put(grammarAccess.getModuleInvokationAccess().getGroup_2_1(), "rule__ModuleInvokation__Group_2_1__0");
					put(grammarAccess.getSymbolAccessorAccess().getGroup_0(), "rule__SymbolAccessor__Group_0__0");
					put(grammarAccess.getSymbolAccessorAccess().getGroup_0_0(), "rule__SymbolAccessor__Group_0_0__0");
					put(grammarAccess.getModuleAccess().getModulePrologAssignment_0(), "rule__Module__ModulePrologAssignment_0");
					put(grammarAccess.getModuleAccess().getTypeAssignment_3(), "rule__Module__TypeAssignment_3");
					put(grammarAccess.getModuleAccess().getValueAssignment_5(), "rule__Module__ValueAssignment_5");
					put(grammarAccess.getModuleAccess().getDecalarationsAssignment_7(), "rule__Module__DecalarationsAssignment_7");
					put(grammarAccess.getModuleAccess().getTasksAssignment_8(), "rule__Module__TasksAssignment_8");
					put(grammarAccess.getMetaDataAccess().getNameAssignment_0(), "rule__MetaData__NameAssignment_0");
					put(grammarAccess.getMetaDataAccess().getValueAssignment_1(), "rule__MetaData__ValueAssignment_1");
					put(grammarAccess.getWordVarAccess().getNameAssignment_1(), "rule__WordVar__NameAssignment_1");
					put(grammarAccess.getWordConstAccess().getNameAssignment_1(), "rule__WordConst__NameAssignment_1");
					put(grammarAccess.getWordConstAccess().getValueAssignment_3(), "rule__WordConst__ValueAssignment_3");
					put(grammarAccess.getFloatVarAccess().getNameAssignment_1(), "rule__FloatVar__NameAssignment_1");
					put(grammarAccess.getFloatConstAccess().getNameAssignment_1(), "rule__FloatConst__NameAssignment_1");
					put(grammarAccess.getFloatConstAccess().getValueAssignment_3(), "rule__FloatConst__ValueAssignment_3");
					put(grammarAccess.getDirectValueAccess().getValueAssignment(), "rule__DirectValue__ValueAssignment");
					put(grammarAccess.getFGAMessageConstantReferenceAccess().getNameAssignment_1(), "rule__FGAMessageConstantReference__NameAssignment_1");
					put(grammarAccess.getFGAMessageConstantReferenceAccess().getRowAssignment_3(), "rule__FGAMessageConstantReference__RowAssignment_3");
					put(grammarAccess.getFGAMessageConstantReferenceAccess().getColumnAssignment_5(), "rule__FGAMessageConstantReference__ColumnAssignment_5");
					put(grammarAccess.getFGAAnalogValueReferenceAccess().getNameAssignment_1(), "rule__FGAAnalogValueReference__NameAssignment_1");
					put(grammarAccess.getFGAAnalogValueReferenceAccess().getRowAssignment_3(), "rule__FGAAnalogValueReference__RowAssignment_3");
					put(grammarAccess.getFGAValueReferenceAccess().getNameAssignment_1(), "rule__FGAValueReference__NameAssignment_1");
					put(grammarAccess.getFGAValueReferenceAccess().getRowAssignment_3(), "rule__FGAValueReference__RowAssignment_3");
					put(grammarAccess.getFGAMeasuredValueReferenceAccess().getNameAssignment_1(), "rule__FGAMeasuredValueReference__NameAssignment_1");
					put(grammarAccess.getFGAMeasuredValueReferenceAccess().getRowAssignment_3(), "rule__FGAMeasuredValueReference__RowAssignment_3");
					put(grammarAccess.getTaskAccess().getTaskPrologAssignment_0(), "rule__Task__TaskPrologAssignment_0");
					put(grammarAccess.getTaskAccess().getIndexAssignment_3(), "rule__Task__IndexAssignment_3");
					put(grammarAccess.getTaskAccess().getTypeAssignment_5(), "rule__Task__TypeAssignment_5");
					put(grammarAccess.getTaskAccess().getCycleTimeAssignment_6_1(), "rule__Task__CycleTimeAssignment_6_1");
					put(grammarAccess.getTaskAccess().getInstructionsAssignment_8(), "rule__Task__InstructionsAssignment_8");
					put(grammarAccess.getModuleInvokationAccess().getModuleNameAssignment_0(), "rule__ModuleInvokation__ModuleNameAssignment_0");
					put(grammarAccess.getModuleInvokationAccess().getArgumentsAssignment_2_0(), "rule__ModuleInvokation__ArgumentsAssignment_2_0");
					put(grammarAccess.getModuleInvokationAccess().getArgumentsAssignment_2_1_1(), "rule__ModuleInvokation__ArgumentsAssignment_2_1_1");
					put(grammarAccess.getSymbolAccessorAccess().getWritingAssignment_0_0_1(), "rule__SymbolAccessor__WritingAssignment_0_0_1");
					put(grammarAccess.getSymbolAccessorAccess().getSymbolAssignment_0_1(), "rule__SymbolAccessor__SymbolAssignment_0_1");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_SPACE", "RULE_EOL" };
	}

	public MICGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MICGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
