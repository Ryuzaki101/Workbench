/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package de.wisag.automation.micas.hwmodules.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import de.wisag.automation.micas.hwmodules.util.HwmodulesAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support
 * Viewers. The adapters generated by this factory convert EMF adapter
 * notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}. The
 * adapters also support Eclipse property sheets. Note that most of the adapters
 * are shared among multiple instances. <!-- begin-user-doc --> <!--
 * end-user-doc -->
 * 
 * @generated
 */
public class HwmodulesItemProviderAdapterFactory extends HwmodulesAdapterFactory
        implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
    /**
     * This keeps track of the root adapter factory that delegates to this
     * adapter factory. <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    protected ComposedAdapterFactory parentAdapterFactory;

    /**
     * This is used to implement
     * {@link org.eclipse.emf.edit.provider.IChangeNotifier}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    protected IChangeNotifier changeNotifier = new ChangeNotifier();

    /**
     * This keeps track of all the supported types checked by
     * {@link #isFactoryForType isFactoryForType}. <!-- begin-user-doc --> <!--
     * end-user-doc -->
     * 
     * @generated
     */
    protected Collection<Object> supportedTypes = new ArrayList<>();

    /**
     * This constructs an instance. <!-- begin-user-doc --> <!-- end-user-doc
     * -->
     *
     * @generated
     */
    public HwmodulesItemProviderAdapterFactory() {
        supportedTypes.add(IEditingDomainItemProvider.class);
        supportedTypes.add(IStructuredItemContentProvider.class);
        supportedTypes.add(ITreeItemContentProvider.class);
        supportedTypes.add(IItemLabelProvider.class);
        supportedTypes.add(IItemPropertySource.class);
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link de.wisag.automation.micas.hwmodules.HardwareTypeDefinition}
     * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    protected HardwareTypeDefinitionItemProvider hardwareTypeDefinitionItemProvider;

    /**
     * This creates an adapter for a
     * {@link de.wisag.automation.micas.hwmodules.HardwareTypeDefinition}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public Adapter createHardwareTypeDefinitionAdapter() {
        if (hardwareTypeDefinitionItemProvider == null) {
            hardwareTypeDefinitionItemProvider = new HardwareTypeDefinitionItemProvider(this);
        }

        return hardwareTypeDefinitionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link de.wisag.automation.micas.hwmodules.HardwareAlias} instances. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    protected HardwareAliasItemProvider hardwareAliasItemProvider;

    /**
     * This creates an adapter for a
     * {@link de.wisag.automation.micas.hwmodules.HardwareAlias}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public Adapter createHardwareAliasAdapter() {
        if (hardwareAliasItemProvider == null) {
            hardwareAliasItemProvider = new HardwareAliasItemProvider(this);
        }

        return hardwareAliasItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link de.wisag.automation.micas.hwmodules.ModuleDefinition} instances.
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    protected ModuleDefinitionItemProvider moduleDefinitionItemProvider;

    /**
     * This creates an adapter for a
     * {@link de.wisag.automation.micas.hwmodules.ModuleDefinition}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public Adapter createModuleDefinitionAdapter() {
        if (moduleDefinitionItemProvider == null) {
            moduleDefinitionItemProvider = new ModuleDefinitionItemProvider(this);
        }

        return moduleDefinitionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link de.wisag.automation.micas.hwmodules.Port} instances. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    protected PortItemProvider portItemProvider;

    /**
     * This creates an adapter for a
     * {@link de.wisag.automation.micas.hwmodules.Port}. <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createPortAdapter() {
        if (portItemProvider == null) {
            portItemProvider = new PortItemProvider(this);
        }

        return portItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link de.wisag.automation.micas.hwmodules.PortGroup} instances. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    protected PortGroupItemProvider portGroupItemProvider;

    /**
     * This creates an adapter for a
     * {@link de.wisag.automation.micas.hwmodules.PortGroup}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public Adapter createPortGroupAdapter() {
        if (portGroupItemProvider == null) {
            portGroupItemProvider = new PortGroupItemProvider(this);
        }

        return portGroupItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link de.wisag.automation.micas.hwmodules.MicasModules} instances. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    protected MicasModulesItemProvider micasModulesItemProvider;

    /**
     * This creates an adapter for a
     * {@link de.wisag.automation.micas.hwmodules.MicasModules}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public Adapter createMicasModulesAdapter() {
        if (micasModulesItemProvider == null) {
            micasModulesItemProvider = new MicasModulesItemProvider(this);
        }

        return micasModulesItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link de.wisag.automation.micas.hwmodules.Parameter} instances. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    protected ParameterItemProvider parameterItemProvider;

    /**
     * This creates an adapter for a
     * {@link de.wisag.automation.micas.hwmodules.Parameter}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public Adapter createParameterAdapter() {
        if (parameterItemProvider == null) {
            parameterItemProvider = new ParameterItemProvider(this);
        }

        return parameterItemProvider;
    }

    /**
     * This returns the root adapter factory that contains this factory. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public ComposeableAdapterFactory getRootAdapterFactory() {
        return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
    }

    /**
     * This sets the composed adapter factory that contains this factory. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
        this.parentAdapterFactory = parentAdapterFactory;
    }

    /**
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public boolean isFactoryForType(Object type) {
        return supportedTypes.contains(type) || super.isFactoryForType(type);
    }

    /**
     * This implementation substitutes the factory itself as the key for the
     * adapter. <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter adapt(Notifier notifier, Object type) {
        return super.adapt(notifier, this);
    }

    /**
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Object adapt(Object object, Object type) {
        if (isFactoryForType(type)) {
            Object adapter = super.adapt(object, type);
            if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
                return adapter;
            }
        }

        return null;
    }

    /**
     * This adds a listener. <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public void addListener(INotifyChangedListener notifyChangedListener) {
        changeNotifier.addListener(notifyChangedListener);
    }

    /**
     * This removes a listener. <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public void removeListener(INotifyChangedListener notifyChangedListener) {
        changeNotifier.removeListener(notifyChangedListener);
    }

    /**
     * This delegates to {@link #changeNotifier} and to
     * {@link #parentAdapterFactory}. <!-- begin-user-doc --> <!-- end-user-doc
     * -->
     *
     * @generated
     */
    @Override
    public void fireNotifyChanged(Notification notification) {
        changeNotifier.fireNotifyChanged(notification);

        if (parentAdapterFactory != null) {
            parentAdapterFactory.fireNotifyChanged(notification);
        }
    }

    /**
     * This disposes all of the item providers created by this factory. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     *
     * @generated
     */
    @Override
    public void dispose() {
        if (hardwareTypeDefinitionItemProvider != null) {
            hardwareTypeDefinitionItemProvider.dispose();
        }
        if (hardwareAliasItemProvider != null) {
            hardwareAliasItemProvider.dispose();
        }
        if (moduleDefinitionItemProvider != null) {
            moduleDefinitionItemProvider.dispose();
        }
        if (portItemProvider != null) {
            portItemProvider.dispose();
        }
        if (portGroupItemProvider != null) {
            portGroupItemProvider.dispose();
        }
        if (micasModulesItemProvider != null) {
            micasModulesItemProvider.dispose();
        }
        if (parameterItemProvider != null) {
            parameterItemProvider.dispose();
        }
    }

}
